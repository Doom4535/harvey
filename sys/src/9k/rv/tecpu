# 9k risc-v cpu server for tinyemu
dev +dev
	root
	cons
	arch
	env
	pipe
	proc
	mnt
	srv
	dup
#	rtc
	ssl
	tls
	cap
	kprof
	segment
	ether		netif
	ip		arp chandial ip ipv6 ipaux iproute netlog nullmedium pktmedium
	uart
	bridge		log
#	draw	screen

uart +dev
	uarti8250

ip +dev
	tcp
	udp
	ipifc
	icmp
	icmp6
#	ipmux

link +dev
	ethertemu
	ethermedium
	loopbackmedium
	netdevmedium
#	usbehci		usbehcipc

misc +dev
	cache

#
#boot cpu
#	int cpuflag = 1;
#boot cpu boot $3
#	int cpuflag = 1;
#	char* bootdisk = "$3";
#boot rootdir $3
#	char* rootdir = "$3";
#boot (bboot|romboot|dosboot)
#	int cpuflag = 1;
#	char* bootprog = $2;
#boot boot $3
#	char* bootdisk = "$3";
#
boot cpu
	tcp

rootdir
	boot$CONF.out		boot
	/riscv64/bin/auth/factotum
	/riscv64/bin/ip/ipconfig
	/cfg/example/nvram.coll	nvram

conf
	#include "riscv64.h"

	int cpuserver = 1;
	/*
	 * the system is more responsive with idlepause=1; luckily an emulated
	 * system is just a toy.  with idlepause=0, time slows, though
	 * aux/timesync can compensate.
	 */
	int idlepause = 1;
	int nosbi = 1;
	uvlong cpuhz = 37*1000*1000;	/* from timesync, emulated on xeon */
	uvlong timebase = 10*1000*1000;	/* clint ticks per second */
	Membank membanks[] = {	 	/* (address, size) pairs */
		PHYSMEM, GB,
		0
	};
	char defnvram[] = "/boot/nvram";

	uintptr uart0regs  =   PAUart0;
	uintptr uartregs[] = { PAUart0 };
	int nuart = nelem(uartregs);
	vlong uartfreq = 384000;

	uchar ether0mac[] = { 2, 0, 0, 0, 0, 1 };

	/* the emulated plic doesn't seem to follow the spec; ignore it. */
	Soc soc = {
		.clint	= (char *)PAClint,
		.uart	= (char *)PAUart0,
		.htif	= (char *)0x40008000,
	};
	Ioconf ioconfs[] = {	/* devices whose drivers vmap their regs */
		{ "ether", 2*PGSZ, &soc.ether[0], 2, },
		0
	};
	Ioconf socconf[] = { /* devices without drivers that vmap their regs */
		{ "clint", 64*KB, &soc.clint, },
		{ "uart",  PGSZ, &soc.uart, 1, },
		{ "htif",  PGSZ, &soc.htif, },
		0
	};

	void iophysaddrset(void) {}

dbgflg
#	sysproc		'E'
#	mp		'M'
#	pci		'P'
#	arch		'V'
#	archrv		'V'
#	asm		'a'
#	chan		'c'
#	mmu		'm'
#	main		'x'
riscv64
	start
	begin
	mtrap
	strap
	l64
	main
	arch
	archrv
	fp
	fpu
	ioconf
#	kbd
	map
	memory
	mmu
	sane
	fakesbi
	sbi
	trap
port
	alarm
	allocb
	awaitbit
	byteserial
	chan
	ctype
	dev
	devtab
	edf
	fault
	image
#	latin1
	logpow
	page
	parse
	pgrp
	portclock
	noprf
	print
	proc
	ps
	qio
	qlock
	qmalloc
	random
	rebootcmd
	segment
	sysauth
	syscall
	syscallfmt
	sysfile
	sysproc
	sysseg
	systab
	taslock
	tod
	watermarks

#
# controls which directories to look in for source files; must be relative to ..
#
dir
	ip
	port

#lib
#	libip
#	libsec
#	libmp
#	libc
